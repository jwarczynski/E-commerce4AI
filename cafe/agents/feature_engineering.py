from pathlib import Path
from typing import Any, Dict

import jwt
import requests

from cafe.core.semantic_model import SemanticModelManager
from cafe.core.snowflake_client import SnowflakeClient
from .base_agent import BaseAgent
from ..utils.config import load_config


class FeatureEngineeringAgent(BaseAgent):
    """Agent that generates feature engineering SQL queries using Cortex Analyst."""

    def __init__(self, snowflake_client: SnowflakeClient, semantic_model_manager: SemanticModelManager):
        super().__init__()
        self.snowflake_client = snowflake_client
        self.semantic_model_manager = semantic_model_manager
        self.host = load_config()["snowflake"]["host"]

    def run(self, prompt: str, semantic_model_path: str | Path) -> str:
        """Generate a feature engineering SQL query."""
        semantic_model = self.semantic_model_manager.load_yaml(semantic_model_path)
        response = self._send_cortex_message(prompt, semantic_model)
        for item in response["message"]["content"]:
            if item["type"] == "sql":
                self.logger.info(f"Generated SQL: {item['statement']}")
                return item["statement"]
        raise ValueError("No SQL generated by Cortex Analyst")

    def _send_cortex_message(self, prompt: str, semantic_model: str) -> Dict[str, Any]:
        """Send a message to Cortex Analyst API."""
        request_body = {
            "messages": [{"role": "user", "content": [{"type": "text", "text": prompt}]}],
            "semantic_model": semantic_model,
        }

        resp = requests.post(
            url=f"https://{self.host}/api/v2/cortex/analyst/message",
            json=request_body,
            headers={
                "Authorization": f"Bearer {self.snowflake_client.get_jwt_token()}",
                "Content-Type": "application/json",
            },
        )
        request_id = resp.headers.get("X-Snowflake-Request-Id")
        if resp.status_code < 400:
            return {**resp.json(), "request_id": request_id}
        else:
            raise Exception(f"Failed request (id: {request_id}): {resp.text}")
