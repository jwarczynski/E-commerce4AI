from pathlib import Path

import yaml
from jinja2 import Environment, FileSystemLoader

from cafe import semantic_model_manager, snowflake_client
from cafe.agents import JudgeAgent
from cafe.agents.tool_calling_snowflake_agent import SnowflakeApiModel, ToolCallingSnowflakeAgent
from cafe.agents.tools import (
    ask_for_sql,
    save_semantic_model,
    update_verified_queries,
)
from cafe.utils.logger import set_global_log_level, setup_logger

set_global_log_level()
logger = setup_logger(__name__)


def load_and_render_template(template_path, semantic_model_path, semantic_model_content):
    """
    Load a YAML prompt template and render it with provided values using Jinja2.

    Args:
        template_path (Path): Path to the YAML template file.
        semantic_model_path (str): Path to the semantic model file.
        semantic_model_content (str): Content of the semantic model.
        logger: Logger instance for logging errors and debug information.

    Returns:
        str: Rendered task prompt.

    Raises:
        FileNotFoundError: If the template file is not found.
        yaml.YAMLError: If the YAML file cannot be parsed.
        Exception: If template rendering fails.
    """
    # Set up Jinja2 environment
    template_dir = template_path.parent
    env = Environment(loader=FileSystemLoader(template_dir))

    # Load the YAML prompt template
    try:
        with open(template_path, 'r') as file:
            template_data = yaml.safe_load(file)
            task_template_str = template_data['task']
    except FileNotFoundError:
        logger.error(f"Prompt template file not found at {template_path}")
        raise
    except yaml.YAMLError as e:
        logger.error(f"Error parsing YAML template: {e}")
        raise

    # Create a Jinja2 template from the task string
    template = env.from_string(task_template_str)

    # Populate the template with values
    try:
        task = template.render(
            semantic_model_path=str(semantic_model_path),
            semantic_model_content=semantic_model_content
        )
        logger.debug("Populated task prompt:\n%s", task)
        return task
    except Exception as e:
        logger.error(f"Error rendering template: {e}")
        raise


def main():
    semantic_model_path = Path.cwd() / "semantic_models" / "revenue_timeseries.yaml"
    semantic_model_content = semantic_model_manager.load_yaml(semantic_model_path)

    template_path = Path.cwd() / "cafe" / "prompts" / "task_prompt_template.yaml"
    task = load_and_render_template(
        template_path=template_path,
        semantic_model_path=str(semantic_model_path),
        semantic_model_content=semantic_model_content,
    )

    snowflake_model = SnowflakeApiModel(snowflake_client)
    sql_llm_based_judge_tool = JudgeAgent(snowflake_client)
    # sql_judge_agent = ToolCallingSnowflakeAgent(
    #     tools=[execute_sql_query, text_output_tool],
    #     model=snowflake_model,
    #     prompt_templates_path=Path().cwd() / "cafe" / "prompts" / "sql_judge_tool_calling_snowflake_agent.yaml",
    #     name="sql_queries_verifier",
    #     description="This agent verifies the SQL queries generated by the Cortex Analyst.",
    # )
    tool_calling_agent = ToolCallingSnowflakeAgent(
        tools=[
            ask_for_sql,
            sql_llm_based_judge_tool,
            save_semantic_model,
            update_verified_queries,
        ],
        # managed_agents=[sql_judge_agent,],
        model=snowflake_model,
    )

    tool_calling_agent.run(task, stream=False, reset=True, max_steps=10)
    semantic_model_manager.show_semantic_model_graph()


if __name__ == "__main__":
    main()
